#install scipy
import os

try:
    result = os.system('python -m pip install scipy')
    if result == 0:
        print("SciPy installed successfully.")
    else:
        print("There was an error installing SciPy.")
except Exception as e:
    print(f"An error occurred: {e}")
#install pandas
import os

os.system('python -m pip install pandas')
#install matplotlib
import os

try:
    result = os.system('python -m pip install matplotlib')
    if result == 0:
        print("Matplotlib installed successfully.")
    else:
        print("There was an error installing Matplotlib.")
except Exception as e:
    print(f"An error occurred: {e}")
#install networkx
import os

try:
    result = os.system('python -m pip install networkx')
    if result == 0:
        print("NetworkX installed successfully.")
    else:
        print("There was an error installing NetworkX.")
except Exception as e:
    print(f"An error occurred: {e}")
#install numpy
import os

try:
    result = os.system('python -m pip install numpy')
    if result == 0:
        print("NumPy installed successfully.")
    else:
        print("There was an error installing NumPy.")
except Exception as e:
    print(f"An error occurred: {e}")
#install cv2
import os

try:
    result = os.system('python -m pip install opencv-python')
    if result == 0:
        print("OpenCV (cv2) installed successfully.")
    else:
        print("There was an error installing OpenCV (cv2).")
except Exception as e:
    print(f"An error occurred: {e}")



#producer-consumer using shared memory

import multiprocessing
import time
import random
import threading

shared_buffer = multiprocessing.Array('i', 5)
buffer_lock = multiprocessing.Lock()
items_produced = multiprocessing.Value('i', 0)
items_consumed = multiprocessing.Value('i', 0)
buffer_not_full = multiprocessing.Condition(lock=buffer_lock)
buffer_not_empty = multiprocessing.Condition(lock=buffer_lock)

def producer():
    for i in range(10):
        item = random.randint(1, 100)
        buffer_lock.acquire()
        while items_produced.value - items_consumed.value == len(shared_buffer):
            buffer_not_full.wait()
        shared_buffer[items_produced.value % len(shared_buffer)] = item
        print(f"Producing {item}")
        print(f"Buffer state after--------producing: {list(shared_buffer)}")
        items_produced.value += 1
        buffer_not_empty.notify()
        buffer_lock.release()
        time.sleep(random.uniform(0.1, 0.5))
    print("Producer finished producing items")

def consumer():
    while True:
        buffer_lock.acquire()
        while items_produced.value == items_consumed.value:
            if items_produced.value == 10:
                buffer_lock.release()
                return
            buffer_not_empty.wait()
        item = shared_buffer[items_consumed.value % len(shared_buffer)]
        shared_buffer[items_consumed.value % len(shared_buffer)] = 0
        items_consumed.value += 1
        buffer_not_full.notify()
        buffer_lock.release()
        print(f"Consuming {item}")
        print(f"Buffer state after--------consuming: {list(shared_buffer)}")
        time.sleep(random.uniform(0.1, 0.3))
    print("Consumer finished consuming items")

if __name__ == "__main__":
    producer_process = threading.Thread(target=producer)
    consumer_process = threading.Thread(target=consumer)

    producer_process.start()
    consumer_process.start()

    producer_process.join()
    consumer_process.join()

    print("All items have been produced and consumed.")

#producer-consumer problem using message box

import threading
import queue
import time
import random

message_queue = queue.Queue(maxsize=5)

class Producer(threading.Thread):
    def run(self):
        global message_queue
        for i in range(10):
            item = f"Item {i}"
            print(f"Producing {item}")
            message_queue.put(item)
            time.sleep(random.uniform(0.1, 0.5))
        print("Producer finished producing items")

class Consumer(threading.Thread):
    def run(self):
        global message_queue
        while True:
            item = message_queue.get()
            if item is None:
                break
            print(f"Consuming {item}")
            message_queue.task_done()
            time.sleep(random.uniform(0.1, 0.3))
        print("Consumer finished consuming items")

producer_thread = Producer()
consumer_thread = Consumer()

producer_thread.start()
consumer_thread.start()

producer_thread.join()
message_queue.put(None)
consumer_thread.join()

print("All items have been produced and consumed.")

#Single thread

import threading
import time

def print_numbers():
    current_thread = threading.current_thread()
    thread_id = threading.get_ident()
    print(f"Thread Name: {current_thread.name}, Thread ID: {thread_id}")

    for i in range(1, 6):
        print(f"Number: {i}")
        time.sleep(1)

    active_threads = threading.active_count()
    thread_list = threading.enumerate()
    print(f"Active Threads: {active_threads}")
    print("Thread List:", thread_list)

thread = threading.Thread(target=print_numbers, name="NumberPrinter")

thread.start()

thread.join()

print("Thread has finished execution.")

#multi thread

import threading
import time

def countdown(name, count):
    while count > 0:
        print(f"{name}: {count}")
        count -= 1
        time.sleep(1)
    print(f"{name} finished counting down!")

if __name__ == "__main__":
    
    thread1 = threading.Thread(target=countdown, args=("Thread-1", 5))
    thread2 = threading.Thread(target=countdown, args=("Thread-2", 3))

    thread1.start()
    thread2.start()

    thread1.join()
    thread2.join()

    print("All threads have finished.")

#multithreaded program that generates the fibonacci series

import threading
import time

def fibonacci(n, result):
    if n == 0:
        result[n] = 0
    elif n == 1:
        result[n] = 1
    else:
        result[n] = result[n-1] + result[n-2]
        print(f"Finished Fibonacci({n}) in thread {threading.current_thread().ident}\n")

if __name__ == "__main__":
    n = int(input("Enter the number of Fibonacci numbers to generate: "))  
    result = [0] * n
    result[0] = 0
    result[1] = 1

    threads = []
    for i in range(2, n):
        t = threading.Thread(target=fibonacci, args=(i, result))
        threads.append(t)
        t.start()
        time.sleep(0.2)

    for t in threads:
        t.join()

    print(f"Fibonacci sequence: {result}")

#Synchronization Bounded buffer

import threading
import time
import random

class BoundedBuffer:
    def __init__(self, size):
        self.size = size
        self.buffer = []
        self.lock = threading.Lock()
        self.empty = threading.Semaphore(size)
        self.full = threading.Semaphore(0)

    def produce(self, item):
        self.empty.acquire()
        with self.lock:
            self.buffer.append(item)
            print(f"Produced {item}. Buffer: {self.buffer}")
        self.full.release()

    def consume(self):
        self.full.acquire()
        with self.lock:
            item = self.buffer.pop(0)
            print(f"Consumed {item}. Buffer: {self.buffer}")
        self.empty.release()

def producer(buffer, stop_event):
    while not stop_event.is_set():
        item = random.randint(1, 100)
        buffer.produce(item)
        time.sleep(random.uniform(0.5, 1.5))

def consumer(buffer, stop_event):
    while not stop_event.is_set():
        buffer.consume()
        time.sleep(random.uniform(0.5, 1.5))

if __name__ == "__main__":
    buffer = BoundedBuffer(size=5)
    stop_event = threading.Event()

    producer_thread = threading.Thread(target=producer, args=(buffer, stop_event))
    consumer_thread = threading.Thread(target=consumer, args=(buffer, stop_event))

    producer_thread.start()
    consumer_thread.start()

    time.sleep(10)

    stop_event.set()
    producer_thread.join()
    consumer_thread.join()

    print("Producer and consumer threads have been stopped.")

#readers-writers problem

import threading
import time
import random

class ReadWriteLock:
    def __init__(self):
        self.readers = 0
        self.writer = False
        self.lock = threading.Lock()
        self.read_ready = threading.Condition(self.lock)
        self.write_ready = threading.Condition(self.lock)

    def start_read(self):
        with self.lock:
            while self.writer:
                self.read_ready.wait()
            self.readers += 1

    def end_read(self):
        with self.lock:
            self.readers -= 1
            if self.readers == 0:
                self.write_ready.notify()

    def start_write(self):
        with self.lock:
            while self.readers > 0 or self.writer:
                self.write_ready.wait()
            self.writer = True

    def end_write(self):
        with self.lock:
            self.writer = False
            self.read_ready.notify_all()
            self.write_ready.notify()

def reader(id, lock, max_iterations):
    for _ in range(max_iterations):
        print(f"Reader {id} is trying to read.")
        lock.start_read()
        print(f"Reader {id} is reading.")
        time.sleep(random.uniform(0.1, 0.5))
        print(f"Reader {id} has finished reading.")
        lock.end_read()
        time.sleep(random.uniform(0.1, 0.5))

def writer(id, lock, max_iterations):
    for _ in range(max_iterations):
        print(f"Writer {id} is trying to write.")
        lock.start_write()
        print(f"Writer {id} is writing.")
        time.sleep(random.uniform(0.1, 0.5))
        print(f"Writer {id} has finished writing.")
        lock.end_write()
        time.sleep(random.uniform(0.1, 0.5))

def main():
    lock = ReadWriteLock()
    max_iterations = 5

    readers = [threading.Thread(target=reader, args=(i, lock, max_iterations)) for i in range(3)]
    writers = [threading.Thread(target=writer, args=(i, lock, max_iterations)) for i in range(2)]

    for r in readers:
        r.start()
    for w in writers:
        w.start()

    for r in readers:
        r.join()
    for w in writers:
        w.join()

if __name__ == "__main__":
    main()

#FCFS scheduling algorithm

class Process:
    def __init__(self, pid, arrival_time, burst_time):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.waiting_time = 0
        self.turnaround_time = 0

def fcfs(processes):
    current_time = 0
    for process in processes:
        if current_time < process.arrival_time:
            current_time = process.arrival_time
        process.waiting_time = current_time - process.arrival_time
        current_time += process.burst_time
        process.turnaround_time = process.waiting_time + process.burst_time

def print_processes(processes):
    print("PID\tWT\tTAT")
    for process in processes:
        print(f"{process.pid}\t{process.waiting_time}\t{process.turnaround_time}")

if __name__ == "__main__":
    processes = [
        Process(1, 0, 5),
        Process(2, 1, 3),
        Process(3, 2, 8),
        Process(4, 3, 6),
    ]
    
    fcfs(processes)
    print_processes(processes)

#program to no preemption scheduling algo, preemptive non preemptive scheduling

processes = [
    {"name": "P1", "arrival_time": 0, "burst_time": 10},
    {"name": "P2", "arrival_time": 2, "burst_time": 5},
    {"name": "P3", "arrival_time": 4, "burst_time": 8},
    {"name": "P4", "arrival_time": 6, "burst_time": 3}
]

current_time = 0
total_waiting_time = 0

print("Process\tStart Time\tEnd Time\tWaiting Time")

for process in processes:
    waiting_time = max(0, current_time - process["arrival_time"])
    total_waiting_time += waiting_time
    current_time += process["burst_time"]
    print(f"{process['name']}\t{max(current_time - process['burst_time'], process['arrival_time'])}\t\t{current_time}\t\t{waiting_time}")

average_waiting_time = total_waiting_time / len(processes)
print("\nAverage Waiting Time:", average_waiting_time)

#RR round robin scheduling algo

class Process:
    def __init__(self, pid, burst_time):
        self.pid = pid
        self.burst_time = burst_time
        self.remaining_time = burst_time

def round_robin(processes, time_quantum):
    queue = processes.copy()
    current_time = 0
    waiting_times = {p.pid: 0 for p in processes}

    while queue:
        process = queue.pop(0)
        if process.remaining_time > time_quantum:
            current_time += time_quantum
            process.remaining_time -= time_quantum
            queue.append(process)
        else:
            current_time += process.remaining_time
            waiting_times[process.pid] += (current_time - process.burst_time - waiting_times[process.pid])
            process.remaining_time = 0
            print(f"Process {process.pid} finished at time {current_time}")

    return waiting_times

def print_waiting_times(waiting_times):
    print("\nWaiting Times:")
    for pid, wt in waiting_times.items():
        print(f"Process {pid}: {wt}")

if __name__ == "__main__":
    processes = [
        Process(1, 10),
        Process(2, 5),
        Process(3, 8)
    ]
    time_quantum = 3

    waiting_times = round_robin(processes, time_quantum)
    print_waiting_times(waiting_times)

#Bankers algo

def bankers_algorithm(allocated, max_needed, available):
    num_processes = len(allocated)
    num_resources = len(available)

    avail2 = available.copy()
    finish = [False] * num_processes
    safe_sequence = []

    while len(safe_sequence) < num_processes:
        found = False
        for i in range(num_processes):
            if not finish[i]:
                if all(max_needed[i][j] - allocated[i][j] <= avail2[j] for j in range(num_resources)):
                    for j in range(num_resources):
                        avail2[j] += allocated[i][j]
                    finish[i] = True
                    safe_sequence.append(i)
                    found = True
                    break

        if not found:
            return None

    return safe_sequence

allocated = [
    [0, 1, 0],
    [2, 0, 0],
    [3, 0, 3],
    [2, 1, 1],
    [0, 0, 2]
]
max_needed = [
    [7, 5, 3],
    [3, 2, 2],
    [9, 0, 2],
    [2, 2, 2],
    [4, 3, 3]
]
available = [3, 3, 2]

safe_sequence = bankers_algorithm(allocated, max_needed, available)

if safe_sequence is not None:
    print("Safe sequence:", safe_sequence)
else:
    print("No safe sequence found. System is in an unsafe state.")

#FIFO page replacement algo

def fifo(page_references, num_frames):
    frame_queue = []
    page_faults = 0

    for page in page_references:
        if page not in frame_queue:
            if len(frame_queue) < num_frames:
                frame_queue.append(page)
            else:
                oldest_page = frame_queue.pop(0)
                print(f"Page {oldest_page} removed from memory")
                frame_queue.append(page)
            page_faults += 1

        print(f"Page {page}: Memory -> {frame_queue}")

    return page_faults

if __name__ == "__main__":
    pages = [1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5]
    num_frames = 3
    print(f"Number of Frames in Memory: {num_frames}")
    print("\nPage Reference Sequence:")

    for page in pages:
        print(page, end=" ")

    print("\n\nSimulation Steps:")

    page_faults = fifo(pages, num_frames)
    print(f"\nTotal page faults: {page_faults}")

#LRU page replacement algo

def lru(page_references, num_frames):
    frame_order = []
    page_faults = 0

    for page in page_references:
        if page not in frame_order:
            if len(frame_order) < num_frames:
                frame_order.append(page)
            else:
                lru_page = frame_order.pop(0)
                print(f"Page {lru_page} removed from memory")
                frame_order.append(page)
            page_faults += 1
        else:
            frame_order.remove(page)
            frame_order.append(page)
        print(f"Page {page}: Memory -> {frame_order}")
    return page_faults

if __name__ == "__main__":
    pages = [1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5]
    num_frames = 3

    print("\nPage Reference Sequence:")
    for page in pages:
        print(page, end=" ")

    print("\n\nSimulation Steps:")

    page_faults = lru(pages, num_frames)
    print(f"\nTotal page faults: {page_faults}")

#designing a file system

import os

class FileSystem:
    def __init__(self):
        self.directories = []

    def create_file(self, path, content=""):
        with open(path, 'w') as f:
            f.write(content)
        print(f"File created at '{path}'")

    def create_directory(self, path):
        os.makedirs(path, exist_ok=True)
        self.directories.append(path)
        print(f"Directory created at '{path}'")

    def read_file(self, path):
        if os.path.exists(path) and os.path.isfile(path):
            with open(path, 'r') as f:
                print(f"Reading from '{path}': {f.read()}")
        else:
            print(f"File '{path}' does not exist.")

    def list_directories(self):
        if self.directories:
            print("Directories created by the user:")
            for dir_path in self.directories:
                print(f"- {dir_path}")
        else:
            print("No directories created yet.")

def main():
    fs = FileSystem()

    while True:
        print("\nChoose an option:")
        print("1. Create Directory")
        print("2. Create File")
        print("3. Read File")
        print("4. List Directories")
        print("5. Exit")
        choice = input("Enter choice (1/2/3/4/5): ")

        if choice == "1":
            path = input("Enter directory path (e.g. /path/to/directory): ")
            fs.create_directory(path)

        elif choice == "2":
            path = input("Enter file path (e.g. /path/to/file.txt): ")
            content = input("Enter file content: ")
            fs.create_file(path, content)

        elif choice == "3":
            path = input("Enter file path to read (e.g. /path/to/file.txt): ")
            fs.read_file(path)

        elif choice == "4":
            fs.list_directories()

        elif choice == "5":
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
